generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  profile          Profile?
  preferences      Preferences?
  matches          Match[]      @relation("UserMatches")
  matchedWith      Match[]      @relation("MatchedUsers")
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
}

model Match {
  id            String   @id @default(cuid())
  userId        String
  matchedUserId String
  status        String   @default("Pending") // other values: Accepted, Declined
  createdAt     DateTime @default(now())
  user          User     @relation("UserMatches", fields: [userId], references: [id], onDelete: Cascade)
  matchedUser   User     @relation("MatchedUsers", fields: [matchedUserId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            String   @id @default(cuid())
  email         String   @unique
  fullName      String
  dateOfBirth   DateTime
  gender        String
  age           Int
  religion      String?
  caste         String?
  motherTongue  String?
  education     String?
  profession    String?
  height        Int?     @default(168)
  maritalStatus String   @default("Unmarried")
  bio           String?
  photos        String[] // URLs of photos
  user          User     @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Preferences {
  id                 String  @id @default(cuid())
  userId             String  @unique
  minAge             Int
  maxAge             Int
  preferredReligion  String?
  preferredCaste     String?
  preferredEducation String?
  preferredHeight    Float? // minimum height in cm
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}
