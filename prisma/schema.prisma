generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  createdAt     DateTime     @default(now())
  email         String?      @unique
  password      String? // For credentials-based authentication
  emailVerified DateTime?
  image         String       @default("/img/user.webp")
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  preferences   Preferences?
  matches       Match[]      @relation("UserMatches")
  matchedWith   Match[]      @relation("MatchedUsers")
}

model Profile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  email               String   @unique
  fullName            String
  surname             String?
  dateOfBirth         DateTime
  gender              String
  image               String?  @default("/img/user.webp")
  age                 Int
  religion            String?
  gotra               String?
  fatherName          String?
  motherName          String?
  fatherOccupation    String?
  motherOccupation    String?
  familyType          String?
  status              String?
  siblings            Int?
  ageRange            String?
  prefferedProfession String?
  prefferedEducation  String?
  prefferedHeight     Float?
  professionSector    String?
  annualIncome        Int?
  professionDetails   String?
  motherTongue        String?
  phone               String?
  latitude            Float?
  longitude           Float?
  city                String?
  aboutMyFamily       String?
  nativePlace         String?
  state               String?
  education           String?
  profession          String?
  height              Int?     @default(168)
  maritalStatus       String   @default("Unmarried")
  bio                 String?
  photos              Json
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preferences {
  id                 String  @id @default(cuid())
  userId             String  @unique
  minAge             Int
  maxAge             Int
  preferredEducation String?
  preferredHeight    Float?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Match {
  id            String   @id @default(cuid())
  userId        String
  matchedUserId String
  status        String   @default("Pending") // Pending, Accepted, Declined, Blocked
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("UserMatches", fields: [userId], references: [id], onDelete: Cascade)
  matchedUser   User     @relation("MatchedUsers", fields: [matchedUserId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
