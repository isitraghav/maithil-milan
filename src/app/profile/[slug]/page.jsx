"use client";
import React from "react";
import { useEffect, useState } from "react";
import { getUserProfile, sendMatchingRequest } from "./server";
import useEmblaCarousel from "embla-carousel-react";
import Autoplay from "embla-carousel-autoplay";
import { IoMdArrowBack, IoMdArrowForward } from "react-icons/io";
import { PiSpinnerLight, PiStarFill } from "react-icons/pi";
import Swal from "sweetalert2";
import jsPDF from "jspdf";

export default function UserProfilePage({ params }) {
  const [emblaRef, elembaApi] = useEmblaCarousel({ loop: false }, [
    Autoplay({ delay: 2000 }),
  ]);
  const [userid, setUserId] = useState();
  const [userData, setUserData] = useState({});

  useEffect(() => {
    const fetchData = async () => {
      const { slug } = await params;
      setUserId(slug);
      const data = await getUserProfile(slug);
      console.log("User data fetched:", data);
      setUserData(data);
    };
    fetchData();
  }, []);
  const exportToPDF = async () => {
    const doc = new jsPDF();
    const primaryColor = "#3F51B5"; // Indigo color
    const margin = 15;
    let yPosition = margin;

    // Add header
    doc.setFillColor(primaryColor);
    doc.rect(0, 0, doc.internal.pageSize.width, 20, "F");
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(255, 255, 255);
    doc.text(`${userData.fullName}'s Profile`, margin, 15);

    // Reset text color
    doc.setTextColor(0, 0, 0);

    // Create layout columns
    const col1 = margin;
    const col2 = doc.internal.pageSize.width / 2 + 10;

    // Add profile image
    if (userData.image) {
      try {
        const dataUrl = await getDataUrl(userData.image);
        doc.addImage(dataUrl, "JPEG", col1, 25, 50, 50);
        yPosition = 80; // Position below image
      } catch (error) {
        console.error("Error loading image:", error);
        yPosition = 30;
      }
    }

    // Add details section
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("Personal Details:", col1, yPosition);
    yPosition += 7;

    // Create details array with icons (using text symbols)
    const details = [
      {
        label: "Name",
        value: `${userData.fullName} ${userData.surname || ""}`,
      },
      { label: "Age", value: `${calculateAge(userData.dateOfBirth)} years` },
      {
        label: "Religion",
        value: `${userData.religion || "N/A"}${
          userData.gotra ? `, ${userData.gotra}` : ""
        }`,
      },
      { label: "Education", value: userData.education || "N/A" },
      { label: "Profession", value: userData.profession || "N/A" },
      {
        label: "Height",
        value: `${userData.height} cm (${convertHeightToFeetInches(
          userData.height
        )})`,
      },
      { label: "Marital Status", value: userData.maritalStatus || "N/A" },
    ];

    // Add details in two columns
    const half = Math.ceil(details.length / 2);
    details.forEach(({ label, value }, index) => {
      const x = index < half ? col1 : col2;
      const lineY = yPosition + (index % half) * 10;

      doc.setFont("helvetica", "bold");
      doc.setTextColor(primaryColor);
      doc.text(`${label}:`, x, lineY);

      doc.setFont("helvetica", "normal");
      doc.setTextColor(0, 0, 0);
      doc.text(value, x + 25, lineY);
    });

    yPosition += half * 10 + 10;

    // Add section separator
    doc.setDrawColor(primaryColor);
    doc.setLineWidth(0.5);
    doc.line(
      margin,
      yPosition,
      doc.internal.pageSize.width - margin,
      yPosition
    );
    yPosition += 10;

    // Add additional sections (example: Family Info)
    doc.setFont("helvetica", "bold");
    doc.setTextColor(primaryColor);
    doc.text("Additional Information:", margin, yPosition);
    yPosition += 7;

    doc.setFont("helvetica", "normal");
    doc.setTextColor(0, 0, 0);
    const additionalInfo = [
      `Family Details: `,
      `  ${userData.familyType} family, `,
      `  Father's Name: ${userData.fatherName}, `,
      `  Father's Occupation: ${userData.fatherOccupation}, `,
      `  Mother's Name: ${userData.motherName}, `,
      `  Mother's Occupation: ${userData.motherOccupation}`,
      ``,
      `Preferences: `,
      `  Profession: ${userData.prefferedProfession}, `,
      `  Education: ${userData.prefferedEducation}, `,
      `  Height: ${userData.prefferedHeight} cm, `,
      `  Sector: ${userData.professionSector}, `,
      `  Annual Income: ${userData.annualIncome} per annum`,
    ];

    additionalInfo.forEach((info) => {
      doc.text(info, margin, yPosition);
      yPosition += 7;
    });

    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Generated by MaithilMilan,.com â€¢ ${new Date().toLocaleDateString()}`,
      margin,
      doc.internal.pageSize.height - 10
    );

    // Save PDF
    doc.save(`${userData.fullName}_profile.pdf`);
  };

  const getDataUrl = async (url) => {
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.readAsDataURL(blob);
    });
  };

  const calculateAge = (dateOfBirth) => {
    if (!dateOfBirth) return "N/A";
    const dob = new Date(dateOfBirth);
    const today = new Date();
    let age = today.getFullYear() - dob.getFullYear();
    const monthDiff = today.getMonth() - dob.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
      age--;
    }
    return age;
  };

  const convertHeightToFeetInches = (height) => {
    const feet = Math.floor(height * 0.032808);
    const inches = Math.round((height * 0.032808 - feet) * 12);
    return `${feet} ft ${inches} in`;
  };

  return (
    <div className="flex flex-col items-center justify-center">
      {userData.id ? (
        <div className="flex flex-col items-center justify-center p-4 space-y-2 mb-10">
          <img
            src={userData.image}
            alt={userData.fullName}
            className="w-40 object-cover aspect-square h-40 rounded-full mb-4"
          />
          <div className="flow-root w-full">
            <dl className="-my-3 divide-y divide-gray-100 text-sm">
              <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                <dt className="font-medium text-gray-900 pl-2">Name</dt>
                <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                  {userData.fullName} {userData.surname || ""}
                </dd>
              </div>

              <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                <dt className="font-medium text-gray-900 pl-2">Age</dt>
                <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                  {userData.dateOfBirth
                    ? calculateAge(userData.dateOfBirth)
                    : "-"}{" "}
                  years old
                </dd>
              </div>
              {userData.religion && (
                <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                  <dt className="font-medium text-gray-900 pl-2">Religion</dt>
                  <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                    {userData.religion}, {userData.gotra}
                  </dd>
                </div>
              )}
              {userData.education && (
                <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                  <dt className="font-medium text-gray-900 pl-2">Education</dt>
                  <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                    {userData.education}
                  </dd>
                </div>
              )}
              {userData.profession && (
                <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                  <dt className="font-medium text-gray-900 pl-2">Profession</dt>
                  <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                    {userData.profession}
                  </dd>
                </div>
              )}
              <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                <dt className="font-medium text-gray-900 pl-2">Height</dt>
                <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                  {convertHeightToFeetInches(userData.height)} ({" "}
                  {userData.height} cm )
                </dd>
              </div>
              <div className="grid grid-cols-1 gap-1 py-3 even:bg-gray-50 sm:grid-cols-3 sm:gap-4">
                <dt className="font-medium text-gray-900 pl-2">
                  Marital Status
                </dt>
                <dd className="text-gray-700 sm:col-span-2 pl-2 md:pl-0">
                  {userData.maritalStatus}
                </dd>
              </div>

              <div className="flex flex-col md:flex-row gap-2 my-4 center-all mt-2">
                {userData?.matches ? (
                  <>
                    <div className="flex items-center gap-2">
                      {userData.matches.status === "Accepted" && (
                        <span className="text-green-500 font-bold">
                          Match Accepted
                        </span>
                      )}
                      {userData.matches.status === "Declined" && (
                        <span className="text-red-500 font-bold">
                          Match Declined
                        </span>
                      )}
                      {userData.matches.status === "Pending" && (
                        <>
                          <button
                            className="p-2 flex gap-2 font-bold text-white bg-[#219742] rounded-lg hover:bg-[#186c30] transition duration-150 ease-in-out"
                            onClick={async (e) => {
                              Swal.fire({
                                title: "Accept Match?",
                                text:
                                  "This will accept the match between you and " +
                                  userData.fullName,
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonColor: "#3085d6",
                                cancelButtonColor: "#d33",
                                confirmButtonText: "Yes, accept it!",
                              }).then((result) => {
                                if (result.isConfirmed) {
                                }
                              });
                            }}
                          >
                            Accept Match
                          </button>
                          <button
                            onClick={async (e) => {
                              Swal.fire({
                                title: "Decline Match?",
                                text:
                                  "This will decline the match between you and " +
                                  userData.fullName,
                                icon: "warning",
                                showCancelButton: true,
                                confirmButtonColor: "#3085d6",
                                cancelButtonColor: "#d33",
                                confirmButtonText: "Yes, decline it!",
                              });
                            }}
                            className="p-2 flex gap-2 font-bold text-white bg-[#b02b36] rounded-lg hover:bg-[#7f1f27] transition duration-150 ease-in-out"
                          >
                            Decline Match
                          </button>
                        </>
                      )}
                    </div>
                  </>
                ) : (
                  <button
                    onClick={async (e) => {
                      let btn = e.target;
                      btn.textContent = "Sending Request...";
                      await sendMatchingRequest(userid).then((e) => {
                        if (e == 0) {
                          btn.textContent = "Request Sent";
                        } else if (e == 2) {
                          btn.textContent = "Request Already Sent";
                        } else {
                          btn.textContent = "Error Sending Request";
                        }
                      });
                    }}
                    className="p-2 flex gap-2 font-bold text-white bg-[#b0772b] rounded-lg hover:bg-[#9c632a] transition duration-150 ease-in-out"
                  >
                    <PiStarFill size={20} aria-hidden="true" />
                    Send Matching Request
                    <PiStarFill size={20} aria-hidden="true" />
                  </button>
                )}

                {/* PDF Export Button */}
                <button
                  onClick={exportToPDF}
                  className="p-2 px-4 font-bold text-white bg-blue-500 rounded-lg hover:bg-blue-600 transition duration-150 ease-in-out"
                >
                  Export Profile as PDF
                </button>
              </div>

              {userData?.photos?.length > 0 && (
                <div className="embla rounded-md" ref={emblaRef}>
                  <div className="embla__container">
                    {userData?.photos?.map((photo, index) => (
                      <div key={index} className="embla__slide mr-2">
                        <img
                          src={photo}
                          className="object-cover h-[30vh] w-64 rounded-xl"
                          alt={userData.fullName}
                        />
                      </div>
                    ))}
                  </div>
                  <div className="embla__arrows mt-2 flex items-center justify-center space-x-2">
                    <button
                      className="embla__button embla__button--prev p-1 rounded-full bg-white shadow-md"
                      onClick={() => elembaApi?.scrollPrev()}
                    >
                      <IoMdArrowBack className="h-6 w-6" aria-hidden="true" />
                    </button>
                    <button
                      className="embla__button embla__button--next p-1 rounded-full bg-white shadow-md"
                      onClick={() => elembaApi?.scrollNext()}
                    >
                      <IoMdArrowForward
                        className="h-6 w-6"
                        aria-hidden="true"
                      />
                    </button>
                  </div>
                </div>
              )}
            </dl>
          </div>
        </div>
      ) : (
        <div className="m-auto h-full w-full">
          <PiSpinnerLight size={40} className="animate-spin w-full h-98" />
        </div>
      )}
    </div>
  );
}
